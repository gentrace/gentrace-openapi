openapi: "3.0.0"

info:
  title: Gentrace API
  description: These API routes are designed to ingest events from clients.
  version: ${npm_package_version}

tags:
  - name: Core
    description: Endpoints for core API functionality
  - name: Feedback
    description: Endpoints for capturing user feedback for runs

servers:
  - url: https://gentrace.ai/api/v1

security:
  - bearerAuth: []

paths:
  /run:
    post:
      tags:
        - Core
      summary: Create a run
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunRequest"
      responses:
        "200":
          description: Stored run
          content:
            application/json; charset=utf-8:
              schema:
                $ref: "#/components/schemas/RunResponse"
            application/json:
              schema:
                $ref: "#/components/schemas/RunResponse"
        "400":
          description: Bad request
        "500":
          description: Internal server error
      x-gentraceMeta:
        name: Store Run event
        group: Core
        path: run
        examples:
          curl: |
            curl -X POST \
              -H 'Authorization: Bearer gen_api_NkztHpkHvl5Z8CXIHZJq3bFPHwO4eLj2dtkh9HGt' \
              -H 'Content-Type: application/json' \
              -d '{
                    "name": "write-email",
                    "stepRuns": [
                      {
                        "provider": {
                          "name": "openai",
                          "invocation": "openai_createCompletion",
                          "modelParams": {
                            "promptTemplate": "What'\''s {{ interestingFact }} in {{ location }}?"
                          },
                          "inputs": {
                            "prompt": {
                              "interestingFact": "the trendiest neighborhood",
                              "location": "New York City"
                            }
                          },
                          "outputs": {
                            "choices": [
                              {
                                "text": "Williamsburg is the trendiest neighborhood in New York City."
                              }
                            ]
                          }
                        },
                        "elapsedTime": 348,
                        "startTime": "2023-03-23T21:16:37.188Z",
                        "endTime": "2023-03-23T21:16:37.896Z"
                      },
                      {
                        "provider": {
                          "name": "openai",
                          "invocation": "openai_createCompletion",
                          "modelParams": {
                            "promptTemplate": "Expand upon the provided paragraph: \\n\\n {{ locationFact }}"
                          },
                          "inputs": {
                            "prompt": {
                              "locationFact": "The trendiest neighborhood in NYC is Williamsburg."
                            }
                          },
                          "outputs": {
                            "choices": [
                              {
                                "text": "Williamsburg is a neighborhood located in the Brooklyn borough of New York City, and it has become one of the trendiest neighborhoods in the city over the past decade. Known for its artsy vibe, vintage shops, street art, and creative atmosphere, Williamsburg has attracted a young, hip crowd that has helped to transform the neighborhood into a hub for music, fashion, and nightlife."
                              }
                            ]
                          }
                        },
                        "elapsedTime": 562,
                        "startTime": "2023-03-23T21:16:38.248Z",
                        "endTime": "2023-03-23T21:16:38.556Z"
                      }
                    ]
                  }' \
              https://gentrace.ai/api/v1/run

          node.js: |
            const { Configuration, Gentrace } = require("@gentrace/node");

            const configuration = new Configuration({
              apiKey: process.env.GENTRACE_API_KEY,
            });

            const gentrace = new Gentrace(configuration);

            gentrace.run({
              name: "write-email",
              stepRuns: [
                {
                  provider: {
                    name: "openai",
                    invocation: "openai_createCompletion",
                    modelParams: {
                      promptTemplate: "What's {{ interestingFact }} in {{ location }}?"
                    },
                    inputs: {
                      prompt: {
                        interestingFact: "the trendiest neighborhood",
                        location: "New York City"
                      }
                    },
                    outputs: {
                      choices: [
                        {
                          text: "Williamsburg is the trendiest neighborhood in New York City."
                        }
                      ]
                    }
                  },
                  elapsedTime: 348,
                  startTime: "2023-03-23T21:16:37.188Z",
                  endTime: "2023-03-23T21:16:37.896Z"
                },
                {
                  provider: {
                    name: "openai",
                    invocation: "openai_createCompletion",
                    modelParams: {
                      promptTemplate: "Expand upon the provided paragraph: \n\n {{ locationFact }}"
                    },
                    inputs: {
                      prompt: {
                        locationFact: "The trendiest neighborhood in NYC is Williamsburg."
                      }
                    },
                    outputs: {
                      choices: [
                        {
                          text: "Williamsburg is a neighborhood located in the Brooklyn borough of New York City, and it has become one of the trendiest neighborhoods in the city over the past decade. Known for its artsy vibe, vintage shops, street art, and creative atmosphere, Williamsburg has attracted a young, hip crowd that has helped to transform the neighborhood into a hub for music, fashion, and nightlife."
                        }
                      ]
                    }
                  },
                  elapsedTime: 562,
                  startTime: "2023-03-23T21:16:38.248Z",
                  endTime: "2023-03-23T21:16:38.556Z"
                }
              ]
            });

        response: |
          {
            "pipelineRunId": "13448D47-BD5D-4664-B6C3-0CB07D8CF2D2"
          }
  /feedback:
    post:
      tags:
        - Feedback
      summary: Submit feedback for a run
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FeedbackRequest"
      responses:
        "200":
          description: Feedback submitted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedbackResponse"
            application/json; charset=utf-8:
              schema:
                $ref: "#/components/schemas/FeedbackResponse"
        "400":
          description: Invalid feedback payload
        "500":
          description: Server error

      x-gentraceMeta:
        name: Store feedback event
        group: core
        path: feedback
        examples:
          curl: |
            curl -X POST \
              -H 'Authorization: Bearer gen_api_NkztHpkHvl5Z8CXIHZJq3bFPHwO4eLj2dtkh9HGt' \
              -H 'Content-Type: application/json' \
              -d '{
                "pipelineRunId": "cc22e63c-1c9a-4cbb-a8ee-7f764eabf97d",
                "rating": "positive",
                "recordedTime": "2023-03-31T15:00:00.000Z",
                "details": "This generated output communicated my voice wonderfully!"
              }' \
              https://gentrace.ai/api/v1/feedback

          node.js: |
            const { Configuration, Gentrace } = require("@gentrace/node");

            const configuration = new Configuration({
              apiKey: process.env.GENTRACE_API_KEY,
            });

            const gentrace = new Gentrace(configuration);

            gentrace.feedback({
              pipelineRunId: "cc22e63c-1c9a-4cbb-a8ee-7f764eabf97d",
              rating: "positive",
              recordedTime: "2023-03-31T15:00:00.000Z",
              details: "This generated output communicated my voice wonderfully!"
            });

        response: |
          {
            "pipelineRunId": "13448D47-BD5D-4664-B6C3-0CB07D8CF2D2"
          }

  /test-case:
    get:
      tags:
        - Core
      summary: Get test cases for a pipeline
      parameters:
        - in: query
          name: pipelineId
          schema:
            type: string
            format: uuid
          description: The ID of the Pipeline to retrieve test cases for
        - in: query
          name: pipelineSlug
          schema:
            type: string
          description: The slug of the Pipeline to retrieve test cases for
      responses:
        "200":
          description: Test cases retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  testCases:
                    type: array
                    items:
                      $ref: "#/components/schemas/TestCase"
            application/json; charset=utf-8:
              schema:
                type: object
                properties:
                  testCases:
                    type: array
                    items:
                      $ref: "#/components/schemas/TestCase"
        "400":
          description: Invalid pipeline ID
        "500":
          description: Server error
  /test-result:
    post:
      tags:
        - Core
      summary: Create a new test result from runs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pipelineSlug:
                  type: string
                  description: The pipeline slug to create the test result for. Only one of pipelineSlug or pipelineId is required.
                pipelineId:
                  type: string
                  description: The pipeline ID to create the test result for. Only one of pipelineSlug or pipelineId is required.
                collectionMethod:
                  type: string
                  description: The method used to collect the test runs
                  enum:
                    - manual
                    - runner
                branch:
                  type: string
                  description: The branch that the test result was created from
                  nullable: true
                commit:
                  type: string
                  description: The commit that the test result was created from
                  nullable: true
                name:
                  type: string
                  description: The name of the test result
                  nullable: true
                testRuns:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: The ID of the test run
                        nullable: true
                      caseId:
                        type: string
                        format: uuid
                        description: The ID of the test case
                      stepRuns:
                        type: array
                        description: Use outputs.steps insteads.
                        items:
                          $ref: '#/components/schemas/StepRun'
                    required:
                      - caseId
                      - stepRuns
              required:
                - testRuns
      responses:
        "200":
          description: Test result created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultId:
                    type: string
                    format: uuid
                required:
                - resultId
            application/json; charset=utf-8:
              schema:
                type: object
                properties:
                  resultId:
                    type: string
                    format: uuid
                required:
                - resultId
    get:
      tags:
        - Core
      summary: Get test result by ID
      parameters:
        - in: query
          name: resultId
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the test result to retrieve
      responses:
        "200":
          description: Test result retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  testResult:
                    $ref: '#/components/schemas/TestResult'
                    description: The test result object.
                  stats:
                    type: object
                    properties:
                      total:
                        type: number
                      pending:
                        type: number
                      failure:
                        type: number
                      done:
                        type: number
                    required:
                      - total
                      - pending
                      - failure
                      - done
                        
            application/json; charset=utf-8:
              schema:
                type: object
                properties:
                  testRun:
                    $ref: '#/components/schemas/TestResult'
                    description: The test result object.
                  stats:
                    type: object
                    properties:
                      total:
                        type: number
                      pending:
                        type: number
                      failure:
                        type: number
                      done:
                        type: number
                    required:
                      - total
                      - pending
                      - failure
                      - done

  /test-run:
    post:
      deprecated: true
      tags:
        - Core
      summary: Create a new test run from test results
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                setId:
                  type: string
                  format: uuid
                  description: The ID of the test case set to run
                branch:
                  type: string
                  description: The branch that the test run was created from
                  nullable: true
                commit:
                  type: string
                  description: The commit that the test run was created from
                  nullable: true
                name:
                  type: string
                  description: The name of the test run
                  nullable: true
                testResults:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: The ID of the test result
                        nullable: true
                      caseId:
                        type: string
                        format: uuid
                        description: The ID of the test case
                      inputs:
                        type: object
                        additionalProperties: true
                        description: The input data for the test case
                      outputs:
                        type: object
                        additionalProperties: true
                        description: The returned outputs for the test case
                      output:
                        type: string
                        description: Use outputs object instead.
                        deprecated: true
                      outputSteps:
                        type: array
                        description: Use outputs.steps insteads.
                        items:
                          type: object
                          properties:
                            key:
                              type: string
                              description: The key of the step
                              minLength: 1
                              maxLength: 100
                            output:
                              type: string
                              description: The output of the step
                            inputs:
                              type: object
                              additionalProperties: 
                                type: string
                              nullable: true
                              description: The inputs of the step
                          required:
                            - key
                            - output
                        minItems: 1
                        nullable: true
                        deprecated: true
                    required:
                      - caseId
                      - inputs
              required:
                - setId
                - testResults
      responses:
        "200":
          description: Test run created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  runId:
                    type: string
                    format: uuid
                required:
                - runId
            application/json; charset=utf-8:
              schema:
                type: object
                properties:
                  runId:
                    type: string
                    format: uuid
                required:
                - runId
    get:
      deprecated: true
      tags:
        - Core
      summary: Get test run by ID
      parameters:
        - in: query
          name: runId
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the test run to retrieve
      responses:
        "200":
          description: Test run retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  testRun:
                    $ref: '#/components/schemas/TestRun'
                    description: The test run object.
                  stats:
                    type: object
                    properties:
                      total:
                        type: number
                      pending:
                        type: number
                      failure:
                        type: number
                      done:
                        type: number
                    required:
                      - total
                      - pending
                      - failure
                      - done
                        
            application/json; charset=utf-8:
              schema:
                type: object
                properties:
                  testRun:
                    $ref: '#/components/schemas/TestRun'
                    description: The test run object.
                  stats:
                    type: object
                    properties:
                      total:
                        type: number
                      pending:
                        type: number
                      failure:
                        type: number
                      done:
                        type: number
                    required:
                      - total
                      - pending
                      - failure
                      - done

  /pipelines:
    get:
      tags:
        - Core
      summary: Get pipelines, optionally filtered by label
      parameters:
        - in: query
          name: label
          schema:
            type: string
          description: The label to filter pipelines by
        - in: query
          name: slug
          schema:
            type: string
          description: The slug to filter pipelines by
      responses:
        "200":
          description: Pipelines retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  pipelines:
                    type: array
                    items:
                      $ref: "#/components/schemas/Pipeline"
                required:
                  - pipelines
            application/json; charset=utf-8:
              schema:
                type: object
                properties:
                  pipelines:
                    type: array
                    items:
                      $ref: "#/components/schemas/Pipeline"
                required:
                  - pipelines
        "400":
          description: Invalid pipeline ID
        "500":
          description: Server error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  schemas:
    RunRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
        collectionMethod:
          type: string
          description: The method used to collect the run
          enum:
            - manual
            - runner
        slug:
          type: string
        name:
          type: string
          deprecated: true
        stepRuns:
          type: array
          items:
            $ref: '#/components/schemas/StepRun'
      required:
        - stepRuns
        - id

    StepRun:
      type: object
      properties:
        provider:
          type: object
          properties:
            name:
              type: string
            invocation:
              type: string
            modelParams:
              type: object
              additionalProperties: true
            inputs:
              type: object
              additionalProperties: true
            outputs:
              type: object
              additionalProperties: true
        elapsedTime:
          type: integer
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time

    RunResponse:
      type: object
      properties:
        pipelineRunId:
          type: string
          format: uuid
      example:
        pipelineRunId: 13448D47-BD5D-4664-B6C3-0CB07D8CF2D2

    FeedbackRequest:
      type: object
      properties:
        pipelineRunId:
          type: string
          format: uuid
        score:
          type: number
          format: float
          minimum: 0
          maximum: 1.0
        recordedTime:
          type: string
          format: date-time
        details:
          type: string
          nullable: true
      required:
        - pipelineRunId
        - score
        - recordedTime
      additionalProperties: false

    FeedbackResponse:
      type: object
      properties:
        message:
          type: string
          example: Success
      required:
        - message
      additionalProperties: false

    TestCase:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The ID of the test case
        createdAt:
          type: string
          format: date-time
          description: The date and time when the test case was created
        archivedAt:
          type: string
          nullable: true
          format: date-time
          description: The date and time when the test case was archived, can be null if the test case has not been archived
        updatedAt:
          type: string
          format: date-time
          description: The date and time when the test case was last updated
        expectedOutputs:
          type: object
          nullable: true
          description: The expected outputs for the test case
        inputs:
          type: object
          additionalProperties: true
          description: The input data for the test case as a JSON object
        name:
          type: string
          description: The name of the test case
        pipelineId:
          type: string
          format: uuid
          description: The ID of the pipeline that the test case belongs to
        setId:
          deprecated: true
          type: string
          format: uuid
          description: The ID of the set (now pipeline) that the test case belongs to
      required:
        - id
        - createdAt
        - updatedAt
        - inputs
        - name
        - pipelineId

    Pipeline:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The ID of the pipeline
        createdAt:
          type: string
          format: date-time
          description: The date and time when the pipeline was created
        updatedAt:
          type: string
          format: date-time
          description: The date and time when the pipeline was last updated
        archivedAt:
          type: string
          format: date-time
          nullable: true
          description: The date and time when the pipeline was archived, can be null if the pipeline has not been archived
        cases:
          type: array
          items:
            $ref: '#/components/schemas/TestCase'
          description: The array of test cases that belong to the pipeline
        labels:
          type: array
          items:
            type: string
          description: The labels attached to the pipeline
        displayName:
          type: string
          description: The name of the pipeline
          nullable: true
        slug:
          type: string
          description: The slug of the pipeline
        organizationId:
          type: string
          description: The ID of the organization that owns the pipeline
        branch:
          type: string
          nullable: true
          description: The branch that the pipeline is associated with
      required:
        - id
        - createdAt
        - updatedAt
        - cases
        - labels
        - slug
        - organizationId
      

    TestResult:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier for the test result.
        createdAt:
          type: string
          format: date-time
          description: The date and time the test result was created.
        updatedAt:
          type: string
          format: date-time
          description: The date and time the test result was last updated.
        pipelineId:
          type: string
          format: uuid
          description: The unique identifier for the pipeline associated with the test result.
        branch:
          type: string
          description: The branch that the test result was created from
        commit:
          type: string
          description: The commit that the test result was created from
        name:
          type: string
          description: The name of the test result

    TestRun:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier for the test run.
        createdAt:
          type: string
          format: date-time
          description: The date and time the test run was created.
        updatedAt:
          type: string
          format: date-time
          description: The date and time the test run was last updated.
        setId:
          type: string
          format: uuid
          description: The unique identifier for the test set associated with the test run.
        branch:
          type: string
          description: The branch that the test run was created from
        commit:
          type: string
          description: The commit that the test run was created from
        name:
          type: string
          description: The name of the test run