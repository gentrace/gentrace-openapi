openapi: "3.0.0"

info:
  title: Gentrace API
  description: These API routes are designed to ingest events from clients.
  version: ${npm_package_version}

tags:
  - name: Core
    description: Endpoints for capturing and delivering pipeline runs and evaluation-relate models (e.g. test cases, test runs)
  - name: Feedback
    description: Endpoints for capturing user feedback

servers:
  - url: https://gentrace.ai/api/v1

security:
  - bearerAuth: []

paths:
  /pipeline-run:
    post:
      tags:
        - Core
      summary: Create a pipeline run
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PipelineRunRequest"
      responses:
        "200":
          description: Stored pipeline run
          content:
            application/json; charset=utf-8:
              schema:
                $ref: "#/components/schemas/PipelineRunResponse"
            application/json:
              schema:
                $ref: "#/components/schemas/PipelineRunResponse"
        "400":
          description: Bad request
        "500":
          description: Internal server error
      x-gentraceMeta:
        name: Store PipelineRun event
        group: Core
        path: pipeline-run
        examples:
          curl: |
            curl -X POST \
              -H 'Authorization: Bearer gen_api_NkztHpkHvl5Z8CXIHZJq3bFPHwO4eLj2dtkh9HGt' \
              -H 'Content-Type: application/json' \
              -d '{
                    "name": "write-email",
                    "stepRuns": [
                      {
                        "provider": {
                          "name": "openai",
                          "invocation": "openai_createCompletion",
                          "modelParams": {
                            "promptTemplate": "What'\''s {{ interestingFact }} in {{ location }}?"
                          },
                          "inputs": {
                            "prompt": {
                              "interestingFact": "the trendiest neighborhood",
                              "location": "New York City"
                            }
                          },
                          "outputs": {
                            "choices": [
                              {
                                "text": "Williamsburg is the trendiest neighborhood in New York City."
                              }
                            ]
                          }
                        },
                        "elapsedTime": 348,
                        "startTime": "2023-03-23T21:16:37.188Z",
                        "endTime": "2023-03-23T21:16:37.896Z"
                      },
                      {
                        "provider": {
                          "name": "openai",
                          "invocation": "openai_createCompletion",
                          "modelParams": {
                            "promptTemplate": "Expand upon the provided paragraph: \\n\\n {{ locationFact }}"
                          },
                          "inputs": {
                            "prompt": {
                              "locationFact": "The trendiest neighborhood in NYC is Williamsburg."
                            }
                          },
                          "outputs": {
                            "choices": [
                              {
                                "text": "Williamsburg is a neighborhood located in the Brooklyn borough of New York City, and it has become one of the trendiest neighborhoods in the city over the past decade. Known for its artsy vibe, vintage shops, street art, and creative atmosphere, Williamsburg has attracted a young, hip crowd that has helped to transform the neighborhood into a hub for music, fashion, and nightlife."
                              }
                            ]
                          }
                        },
                        "elapsedTime": 562,
                        "startTime": "2023-03-23T21:16:38.248Z",
                        "endTime": "2023-03-23T21:16:38.556Z"
                      }
                    ]
                  }' \
              https://gentrace.ai/api/v1/pipeline-run

          node.js: |
            const { Configuration, Gentrace } = require("@gentrace/node");

            const configuration = new Configuration({
              apiKey: process.env.GENTRACE_API_KEY,
            });

            const gentrace = new Gentrace(configuration);

            gentrace.pipelineRun({
              name: "write-email",
              stepRuns: [
                {
                  provider: {
                    name: "openai",
                    invocation: "openai_createCompletion",
                    modelParams: {
                      promptTemplate: "What's {{ interestingFact }} in {{ location }}?"
                    },
                    inputs: {
                      prompt: {
                        interestingFact: "the trendiest neighborhood",
                        location: "New York City"
                      }
                    },
                    outputs: {
                      choices: [
                        {
                          text: "Williamsburg is the trendiest neighborhood in New York City."
                        }
                      ]
                    }
                  },
                  elapsedTime: 348,
                  startTime: "2023-03-23T21:16:37.188Z",
                  endTime: "2023-03-23T21:16:37.896Z"
                },
                {
                  provider: {
                    name: "openai",
                    invocation: "openai_createCompletion",
                    modelParams: {
                      promptTemplate: "Expand upon the provided paragraph: \n\n {{ locationFact }}"
                    },
                    inputs: {
                      prompt: {
                        locationFact: "The trendiest neighborhood in NYC is Williamsburg."
                      }
                    },
                    outputs: {
                      choices: [
                        {
                          text: "Williamsburg is a neighborhood located in the Brooklyn borough of New York City, and it has become one of the trendiest neighborhoods in the city over the past decade. Known for its artsy vibe, vintage shops, street art, and creative atmosphere, Williamsburg has attracted a young, hip crowd that has helped to transform the neighborhood into a hub for music, fashion, and nightlife."
                        }
                      ]
                    }
                  },
                  elapsedTime: 562,
                  startTime: "2023-03-23T21:16:38.248Z",
                  endTime: "2023-03-23T21:16:38.556Z"
                }
              ]
            });

        response: |
          {
            "pipelineRunId": "13448D47-BD5D-4664-B6C3-0CB07D8CF2D2"
          }
  /feedback:
    post:
      tags:
        - Feedback
      summary: Submit feedback for a pipeline run
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FeedbackRequest"
      responses:
        "200":
          description: Feedback submitted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedbackResponse"
            application/json; charset=utf-8:
              schema:
                $ref: "#/components/schemas/FeedbackResponse"
        "400":
          description: Invalid feedback payload
        "500":
          description: Server error

      x-gentraceMeta:
        name: Store feedback event
        group: core
        path: feedback
        examples:
          curl: |
            curl -X POST \
              -H 'Authorization: Bearer gen_api_NkztHpkHvl5Z8CXIHZJq3bFPHwO4eLj2dtkh9HGt' \
              -H 'Content-Type: application/json' \
              -d '{
                "pipelineRunId": "cc22e63c-1c9a-4cbb-a8ee-7f764eabf97d",
                "rating": "positive",
                "recordedTime": "2023-03-31T15:00:00.000Z",
                "details": "This generated output communicated my voice wonderfully!"
              }' \
              https://gentrace.ai/api/v1/feedback

          node.js: |
            const { Configuration, Gentrace } = require("@gentrace/node");

            const configuration = new Configuration({
              apiKey: process.env.GENTRACE_API_KEY,
            });

            const gentrace = new Gentrace(configuration);

            gentrace.feedback({
              pipelineRunId: "cc22e63c-1c9a-4cbb-a8ee-7f764eabf97d",
              rating: "positive",
              recordedTime: "2023-03-31T15:00:00.000Z",
              details: "This generated output communicated my voice wonderfully!"
            });

        response: |
          {
            "pipelineRunId": "13448D47-BD5D-4664-B6C3-0CB07D8CF2D2"
          }

  /test-case:
    get:
      tags:
        - Core
      summary: Get test cases for a test set
      parameters:
        - in: query
          name: setId
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the test case set to retrieve
      responses:
        "200":
          description: Test cases retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  testCases:
                    type: array
                    items:
                      $ref: "#/components/schemas/TestCase"
            application/json; charset=utf-8:
              schema:
                type: object
                properties:
                  testCases:
                    type: array
                    items:
                      $ref: "#/components/schemas/TestCase"
        "400":
          description: Invalid test set ID
        "500":
          description: Server error
  /test-run:
    post:
      tags:
        - Core
      summary: Create a new test run from test results
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                setId:
                  type: string
                  format: uuid
                  description: The ID of the test case set to run
                branch:
                  type: string
                  description: The branch that the test run was created from
                commit:
                  type: string
                  description: The commit that the test run was created from
                name:
                  type: string
                  description: The name of the test run
                testResults:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: The ID of the test result
                      caseId:
                        type: string
                        format: uuid
                        description: The ID of the test case
                      inputs:
                        type: object
                        description: The input data for the test case
                      output:
                        type: string
                        description: The expected output for the test case
                    required:
                      - caseId
                      - inputs
                      - output
              required:
                - setId
                - testResults
      responses:
        "200":
          description: Test run created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  runId:
                    type: string
                    format: uuid
                required:
                - runId
            application/json; charset=utf-8:
              schema:
                type: object
                properties:
                  runId:
                    type: string
                    format: uuid
                required:
                - runId
    get:
      tags:
        - Core
      summary: Get test run by ID
      parameters:
        - in: query
          name: runId
          schema:
            type: string
            format: uuid
          required: true
          description: The ID of the test run to retrieve
      responses:
        "200":
          description: Test run retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  testRun:
                    $ref: '#/components/schemas/TestRun'
                    description: The test run object.
                  stats:
                    type: object
                    properties:
                      total:
                        type: number
                      pending:
                        type: number
                      failure:
                        type: number
                      done:
                        type: number
                    required:
                      - total
                      - pending
                      - failure
                      - done
                        
            application/json; charset=utf-8:
              schema:
                type: object
                properties:
                  testRun:
                    $ref: '#/components/schemas/TestRun'
                    description: The test run object.
                  stats:
                    type: object
                    properties:
                      total:
                        type: number
                      pending:
                        type: number
                      failure:
                        type: number
                      done:
                        type: number
                    required:
                      - total
                      - pending
                      - failure
                      - done

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  schemas:
    PipelineRunRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        stepRuns:
          type: array
          items:
            type: object
            properties:
              provider:
                type: object
                properties:
                  name:
                    type: string
                  invocation:
                    type: string
                  modelParams:
                    type: object
                    additionalProperties: true
                  inputs:
                    type: object
                    additionalProperties: true
                  outputs:
                    type: object
                    additionalProperties: true
              elapsedTime:
                type: integer
              startTime:
                type: string
                format: date-time
              endTime:
                type: string
                format: date-time
      required:
        - name
        - stepRuns
        - id

    PipelineRunResponse:
      type: object
      properties:
        pipelineRunId:
          type: string
          format: uuid
      example:
        pipelineRunId: 13448D47-BD5D-4664-B6C3-0CB07D8CF2D2

    FeedbackRequest:
      type: object
      properties:
        pipelineRunId:
          type: string
          format: uuid
        score:
          type: number
          format: float
          minimum: 0
          maximum: 1.0
        recordedTime:
          type: string
          format: date-time
        details:
          type: string
          nullable: true
      required:
        - pipelineRunId
        - score
        - recordedTime
      additionalProperties: false

    FeedbackResponse:
      type: object
      properties:
        message:
          type: string
          example: Success
      required:
        - message
      additionalProperties: false

    TestCase:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The ID of the test case
        createdAt:
          type: string
          format: date-time
          description: The date and time when the test case was created
        archivedAt:
          type: string
          nullable: true
          format: date-time
          description: The date and time when the test case was archived, can be null if the test case has not been archived
        updatedAt:
          type: string
          format: date-time
          description: The date and time when the test case was last updated
        expected:
          type: string
          nullable: true
          description: The expected output for the test case
        inputs:
          type: string
          description: The input data for the test case as a JSON string
        name:
          type: string
          description: The name of the test case
        setId:
          type: string
          format: uuid
          description: The ID of the test set that the test case belongs to
      required:
        - id
        - createdAt
        - updatedAt
        - inputs
        - name
        - setId

    TestRun:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier for the test run.
        createdAt:
          type: string
          format: date-time
          description: The date and time the test run was created.
        updatedAt:
          type: string
          format: date-time
          description: The date and time the test run was last updated.
        setId:
          type: string
          format: uuid
          description: The unique identifier for the test set associated with the test run.
        branch:
          type: string
          description: The branch that the test run was created from
        commit:
          type: string
          description: The commit that the test run was created from
        name:
          type: string
          description: The name of the test run
