# coding: utf-8

# flake8: noqa

{{>partial_header}}

__version__ = "{{packageVersion}}"

# import ApiClient
from {{packageName}}.api_client import ApiClient

# import Configuration
from {{packageName}}.configuration import Configuration
{{#if hasHttpSignatureMethods}}
from {{packageName}}.signing import HttpSigningConfiguration
{{/if}}

from {{packageName}}.providers.utils import is_openai_v1

# import exceptions
from {{packageName}}.exceptions import OpenApiException
from {{packageName}}.exceptions import ApiAttributeError
from {{packageName}}.exceptions import ApiTypeError
from {{packageName}}.exceptions import ApiValueError
from {{packageName}}.exceptions import ApiKeyError
from {{packageName}}.exceptions import ApiException
{{#if recursionLimit}}

__import__('sys').setrecursionlimit({{recursionLimit}})
{{/if}}

from {{packageName}}.providers.evaluation import *
from {{packageName}}.providers.pipeline import Pipeline
from {{packageName}}.providers.pipeline_run import PipelineRun, flush, get_run
from {{packageName}}.providers.step_run import StepRun
from {{packageName}}.providers.utils import to_date_string
from {{packageName}}.providers.files import *

from {{packageName}}.providers.getters import *
from {{packageName}}.providers.init import init, deinit

if is_openai_v1():
    from gentrace.providers.llms.handlers.openai_v1.simple import SimpleGentraceSyncOpenAITyped as OpenAI
    from gentrace.providers.llms.handlers.openai_v1.simple import SimpleGentraceAsyncOpenAITyped as AsyncOpenAI



# @deprecated: use gentrace.providers.init.init() instead to set the Gentrace
# API key
api_key = ""

# @deprecated: use gentrace.providers.init.init() instead to set the Gentrace
# host
host = ""

# @deprecated: use gentrace.providers.init.init() instead to set the Gentrace
# log level
log_level = "warn"